/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface DeployFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createPrivateCapsuleCollection"
      | "createPublicCapsuleCollection"
      | "createRegistry"
      | "deployAllInstances"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AllDeployed"
      | "PrivateCapsuleCollectionCreated"
      | "PublicCapsuleCollectionCreated"
      | "RegistryCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createPrivateCapsuleCollection",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createPublicCapsuleCollection",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployAllInstances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createPrivateCapsuleCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPublicCapsuleCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployAllInstances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace AllDeployedEvent {
  export type InputTuple = [
    registry: AddressLike,
    publicCapsuleCollection: AddressLike,
    privateCapsuleCollection: AddressLike
  ];
  export type OutputTuple = [
    registry: string,
    publicCapsuleCollection: string,
    privateCapsuleCollection: string
  ];
  export interface OutputObject {
    registry: string;
    publicCapsuleCollection: string;
    privateCapsuleCollection: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrivateCapsuleCollectionCreatedEvent {
  export type InputTuple = [instance: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [instance: string, timestamp: bigint];
  export interface OutputObject {
    instance: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublicCapsuleCollectionCreatedEvent {
  export type InputTuple = [instance: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [instance: string, timestamp: bigint];
  export interface OutputObject {
    instance: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegistryCreatedEvent {
  export type InputTuple = [instance: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [instance: string, timestamp: bigint];
  export interface OutputObject {
    instance: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DeployFactory extends BaseContract {
  connect(runner?: ContractRunner | null): DeployFactory;
  waitForDeployment(): Promise<this>;

  interface: DeployFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createPrivateCapsuleCollection: TypedContractMethod<
    [adminUser: AddressLike],
    [string],
    "nonpayable"
  >;

  createPublicCapsuleCollection: TypedContractMethod<
    [adminUser: AddressLike],
    [string],
    "nonpayable"
  >;

  createRegistry: TypedContractMethod<
    [adminUser: AddressLike],
    [string],
    "nonpayable"
  >;

  deployAllInstances: TypedContractMethod<
    [adminUser: AddressLike],
    [
      [string, string, string] & {
        registryInstance: string;
        publicCapsuleCollectionInstance: string;
        privateCapsuleCollectionInstance: string;
      }
    ],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createPrivateCapsuleCollection"
  ): TypedContractMethod<[adminUser: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "createPublicCapsuleCollection"
  ): TypedContractMethod<[adminUser: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "createRegistry"
  ): TypedContractMethod<[adminUser: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "deployAllInstances"
  ): TypedContractMethod<
    [adminUser: AddressLike],
    [
      [string, string, string] & {
        registryInstance: string;
        publicCapsuleCollectionInstance: string;
        privateCapsuleCollectionInstance: string;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "AllDeployed"
  ): TypedContractEvent<
    AllDeployedEvent.InputTuple,
    AllDeployedEvent.OutputTuple,
    AllDeployedEvent.OutputObject
  >;
  getEvent(
    key: "PrivateCapsuleCollectionCreated"
  ): TypedContractEvent<
    PrivateCapsuleCollectionCreatedEvent.InputTuple,
    PrivateCapsuleCollectionCreatedEvent.OutputTuple,
    PrivateCapsuleCollectionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PublicCapsuleCollectionCreated"
  ): TypedContractEvent<
    PublicCapsuleCollectionCreatedEvent.InputTuple,
    PublicCapsuleCollectionCreatedEvent.OutputTuple,
    PublicCapsuleCollectionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RegistryCreated"
  ): TypedContractEvent<
    RegistryCreatedEvent.InputTuple,
    RegistryCreatedEvent.OutputTuple,
    RegistryCreatedEvent.OutputObject
  >;

  filters: {
    "AllDeployed(address,address,address)": TypedContractEvent<
      AllDeployedEvent.InputTuple,
      AllDeployedEvent.OutputTuple,
      AllDeployedEvent.OutputObject
    >;
    AllDeployed: TypedContractEvent<
      AllDeployedEvent.InputTuple,
      AllDeployedEvent.OutputTuple,
      AllDeployedEvent.OutputObject
    >;

    "PrivateCapsuleCollectionCreated(address,uint256)": TypedContractEvent<
      PrivateCapsuleCollectionCreatedEvent.InputTuple,
      PrivateCapsuleCollectionCreatedEvent.OutputTuple,
      PrivateCapsuleCollectionCreatedEvent.OutputObject
    >;
    PrivateCapsuleCollectionCreated: TypedContractEvent<
      PrivateCapsuleCollectionCreatedEvent.InputTuple,
      PrivateCapsuleCollectionCreatedEvent.OutputTuple,
      PrivateCapsuleCollectionCreatedEvent.OutputObject
    >;

    "PublicCapsuleCollectionCreated(address,uint256)": TypedContractEvent<
      PublicCapsuleCollectionCreatedEvent.InputTuple,
      PublicCapsuleCollectionCreatedEvent.OutputTuple,
      PublicCapsuleCollectionCreatedEvent.OutputObject
    >;
    PublicCapsuleCollectionCreated: TypedContractEvent<
      PublicCapsuleCollectionCreatedEvent.InputTuple,
      PublicCapsuleCollectionCreatedEvent.OutputTuple,
      PublicCapsuleCollectionCreatedEvent.OutputObject
    >;

    "RegistryCreated(address,uint256)": TypedContractEvent<
      RegistryCreatedEvent.InputTuple,
      RegistryCreatedEvent.OutputTuple,
      RegistryCreatedEvent.OutputObject
    >;
    RegistryCreated: TypedContractEvent<
      RegistryCreatedEvent.InputTuple,
      RegistryCreatedEvent.OutputTuple,
      RegistryCreatedEvent.OutputObject
    >;
  };
}
