/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type ReadPublicCapsuleParamsStruct = { tokenId: BigNumberish };

export type ReadPublicCapsuleParamsStructOutput = [tokenId: bigint] & {
  tokenId: bigint;
};

export type PublicCapsuleParamsStruct = {
  message: string;
  revealMessageHash: BytesLike;
  unlockTimestamp: BigNumberish;
};

export type PublicCapsuleParamsStructOutput = [
  message: string,
  revealMessageHash: string,
  unlockTimestamp: bigint
] & { message: string; revealMessageHash: string; unlockTimestamp: bigint };

export type PublicCapsuleDataStruct = {
  data: PublicCapsuleParamsStruct;
  status: BigNumberish;
};

export type PublicCapsuleDataStructOutput = [
  data: PublicCapsuleParamsStructOutput,
  status: bigint
] & { data: PublicCapsuleParamsStructOutput; status: bigint };

export interface IPublicCapsuleMetadataInterface extends Interface {
  getFunction(nameOrSignature: "readPublicCapsuleRecord"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "readPublicCapsuleRecord",
    values: [ReadPublicCapsuleParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "readPublicCapsuleRecord",
    data: BytesLike
  ): Result;
}

export interface IPublicCapsuleMetadata extends BaseContract {
  connect(runner?: ContractRunner | null): IPublicCapsuleMetadata;
  waitForDeployment(): Promise<this>;

  interface: IPublicCapsuleMetadataInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  readPublicCapsuleRecord: TypedContractMethod<
    [readParams: ReadPublicCapsuleParamsStruct],
    [PublicCapsuleDataStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "readPublicCapsuleRecord"
  ): TypedContractMethod<
    [readParams: ReadPublicCapsuleParamsStruct],
    [PublicCapsuleDataStructOutput],
    "view"
  >;

  filters: {};
}
