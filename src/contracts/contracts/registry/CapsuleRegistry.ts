/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type PrivateCapsuleCreateParamsStruct = {
  tokenId: BigNumberish;
  message: string;
  readKey: string;
  revealKey: string;
  unlockTimestamp: BigNumberish;
};

export type PrivateCapsuleCreateParamsStructOutput = [
  tokenId: bigint,
  message: string,
  readKey: string,
  revealKey: string,
  unlockTimestamp: bigint
] & {
  tokenId: bigint;
  message: string;
  readKey: string;
  revealKey: string;
  unlockTimestamp: bigint;
};

export type PublicCapsuleCreateParamsStruct = {
  tokenId: BigNumberish;
  message: string;
  revealKey: string;
  unlockTimestamp: BigNumberish;
};

export type PublicCapsuleCreateParamsStructOutput = [
  tokenId: bigint,
  message: string,
  revealKey: string,
  unlockTimestamp: bigint
] & {
  tokenId: bigint;
  message: string;
  revealKey: string;
  unlockTimestamp: bigint;
};

export type ReadPrivateCapsuleParamsStruct = {
  tokenId: BigNumberish;
  readKey: string;
};

export type ReadPrivateCapsuleParamsStructOutput = [
  tokenId: bigint,
  readKey: string
] & { tokenId: bigint; readKey: string };

export type PrivateCapsuleParamsStruct = {
  message: string;
  readMessageHash: BytesLike;
  revealMessageHash: BytesLike;
  unlockTimestamp: BigNumberish;
};

export type PrivateCapsuleParamsStructOutput = [
  message: string,
  readMessageHash: string,
  revealMessageHash: string,
  unlockTimestamp: bigint
] & {
  message: string;
  readMessageHash: string;
  revealMessageHash: string;
  unlockTimestamp: bigint;
};

export type PrivateCapsuleDataStruct = {
  data: PrivateCapsuleParamsStruct;
  status: BigNumberish;
};

export type PrivateCapsuleDataStructOutput = [
  data: PrivateCapsuleParamsStructOutput,
  status: bigint
] & { data: PrivateCapsuleParamsStructOutput; status: bigint };

export type ReadPublicCapsuleParamsStruct = { tokenId: BigNumberish };

export type ReadPublicCapsuleParamsStructOutput = [tokenId: bigint] & {
  tokenId: bigint;
};

export type PublicCapsuleParamsStruct = {
  message: string;
  revealMessageHash: BytesLike;
  unlockTimestamp: BigNumberish;
};

export type PublicCapsuleParamsStructOutput = [
  message: string,
  revealMessageHash: string,
  unlockTimestamp: bigint
] & { message: string; revealMessageHash: string; unlockTimestamp: bigint };

export type PublicCapsuleDataStruct = {
  data: PublicCapsuleParamsStruct;
  status: BigNumberish;
};

export type PublicCapsuleDataStructOutput = [
  data: PublicCapsuleParamsStructOutput,
  status: bigint
] & { data: PublicCapsuleParamsStructOutput; status: bigint };

export type RevealPrivateCapsuleParamsStruct = {
  tokenId: BigNumberish;
  revealKey: string;
};

export type RevealPrivateCapsuleParamsStructOutput = [
  tokenId: bigint,
  revealKey: string
] & { tokenId: bigint; revealKey: string };

export type RevealPublicCapsuleParamsStruct = {
  tokenId: BigNumberish;
  revealKey: string;
};

export type RevealPublicCapsuleParamsStructOutput = [
  tokenId: bigint,
  revealKey: string
] & { tokenId: bigint; revealKey: string };

export interface CapsuleRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addPrivateCapsuleRecord"
      | "addPublicCapsuleRecord"
      | "authenticateCaller"
      | "deauthenticateCaller"
      | "owner"
      | "readPrivateCapsuleRecord"
      | "readPublicCapsuleRecord"
      | "renounceOwnership"
      | "revealPrivateCapsuleRecord"
      | "revealPublicCapsuleRecord"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "addPrivateCapsuleRecord",
    values: [PrivateCapsuleCreateParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addPublicCapsuleRecord",
    values: [PublicCapsuleCreateParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "authenticateCaller",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deauthenticateCaller",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "readPrivateCapsuleRecord",
    values: [ReadPrivateCapsuleParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "readPublicCapsuleRecord",
    values: [ReadPublicCapsuleParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealPrivateCapsuleRecord",
    values: [RevealPrivateCapsuleParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "revealPublicCapsuleRecord",
    values: [RevealPublicCapsuleParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addPrivateCapsuleRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPublicCapsuleRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authenticateCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deauthenticateCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readPrivateCapsuleRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readPublicCapsuleRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealPrivateCapsuleRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealPublicCapsuleRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CapsuleRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): CapsuleRegistry;
  waitForDeployment(): Promise<this>;

  interface: CapsuleRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addPrivateCapsuleRecord: TypedContractMethod<
    [createParams: PrivateCapsuleCreateParamsStruct],
    [void],
    "nonpayable"
  >;

  addPublicCapsuleRecord: TypedContractMethod<
    [createParams: PublicCapsuleCreateParamsStruct],
    [void],
    "nonpayable"
  >;

  authenticateCaller: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  deauthenticateCaller: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  readPrivateCapsuleRecord: TypedContractMethod<
    [readParams: ReadPrivateCapsuleParamsStruct],
    [PrivateCapsuleDataStructOutput],
    "view"
  >;

  readPublicCapsuleRecord: TypedContractMethod<
    [readParams: ReadPublicCapsuleParamsStruct],
    [PublicCapsuleDataStructOutput],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revealPrivateCapsuleRecord: TypedContractMethod<
    [revealParams: RevealPrivateCapsuleParamsStruct],
    [void],
    "nonpayable"
  >;

  revealPublicCapsuleRecord: TypedContractMethod<
    [revealParams: RevealPublicCapsuleParamsStruct],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addPrivateCapsuleRecord"
  ): TypedContractMethod<
    [createParams: PrivateCapsuleCreateParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addPublicCapsuleRecord"
  ): TypedContractMethod<
    [createParams: PublicCapsuleCreateParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authenticateCaller"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deauthenticateCaller"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "readPrivateCapsuleRecord"
  ): TypedContractMethod<
    [readParams: ReadPrivateCapsuleParamsStruct],
    [PrivateCapsuleDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "readPublicCapsuleRecord"
  ): TypedContractMethod<
    [readParams: ReadPublicCapsuleParamsStruct],
    [PublicCapsuleDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revealPrivateCapsuleRecord"
  ): TypedContractMethod<
    [revealParams: RevealPrivateCapsuleParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revealPublicCapsuleRecord"
  ): TypedContractMethod<
    [revealParams: RevealPublicCapsuleParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
