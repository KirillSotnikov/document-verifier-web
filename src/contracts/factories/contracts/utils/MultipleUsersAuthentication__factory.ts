/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MultipleUsersAuthentication,
  MultipleUsersAuthenticationInterface,
} from "../../../contracts/utils/MultipleUsersAuthentication";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "adminUser",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "authenticateCaller",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "deauthenticateCaller",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f5ffd5b5060405161036638038061036683398101604081905261002e916100e5565b806001600160a01b03811661005c57604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b61006581610096565b50610090816001600160a01b03165f908152600160208190526040909120805460ff19169091179055565b50610112565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f602082840312156100f5575f5ffd5b81516001600160a01b038116811461010b575f5ffd5b9392505050565b6102478061011f5f395ff3fe608060405234801561000f575f5ffd5b5060043610610055575f3560e01c80630ab39438146100595780635ca5025b1461006e578063715018a6146100815780638da5cb5b14610089578063f2fde38b146100a7575b5f5ffd5b61006c6100673660046101e4565b6100ba565b005b61006c61007c3660046101e4565b6100ef565b61006c610117565b5f54604080516001600160a01b039092168252519081900360200190f35b61006c6100b53660046101e4565b61012a565b6100c2610169565b6100ec816001600160a01b03165f908152600160208190526040909120805460ff19169091179055565b50565b6100f7610169565b6001600160a01b03165f908152600160205260409020805460ff19169055565b61011f610169565b6101285f610195565b565b610132610169565b6001600160a01b03811661016057604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6100ec81610195565b5f546001600160a01b031633146101285760405163118cdaa760e01b8152336004820152602401610157565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f602082840312156101f4575f5ffd5b81356001600160a01b038116811461020a575f5ffd5b939250505056fea26469706673582212206f9af2f13ac13de0c2daa416d210e9cd17e5e0d940ac9d73824d99afe70a8e2164736f6c634300081c0033";

type MultipleUsersAuthenticationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultipleUsersAuthenticationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultipleUsersAuthentication__factory extends ContractFactory {
  constructor(...args: MultipleUsersAuthenticationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    adminUser: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(adminUser, overrides || {});
  }
  override deploy(
    adminUser: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(adminUser, overrides || {}) as Promise<
      MultipleUsersAuthentication & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MultipleUsersAuthentication__factory {
    return super.connect(runner) as MultipleUsersAuthentication__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultipleUsersAuthenticationInterface {
    return new Interface(_abi) as MultipleUsersAuthenticationInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MultipleUsersAuthentication {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MultipleUsersAuthentication;
  }
}
