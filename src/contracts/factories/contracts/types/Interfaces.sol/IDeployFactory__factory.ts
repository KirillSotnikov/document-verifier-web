/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IDeployFactory,
  IDeployFactoryInterface,
} from "../../../../contracts/types/Interfaces.sol/IDeployFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "adminUser",
        type: "address",
      },
    ],
    name: "deployAllInstances",
    outputs: [
      {
        internalType: "contract ICapsuleRegistry",
        name: "registryInstance",
        type: "address",
      },
      {
        internalType: "contract IMinERC721Public",
        name: "publicCapsuleCollectionInstance",
        type: "address",
      },
      {
        internalType: "contract IMinERC721Private",
        name: "privateCapsuleCollectionInstance",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IDeployFactory__factory {
  static readonly abi = _abi;
  static createInterface(): IDeployFactoryInterface {
    return new Interface(_abi) as IDeployFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IDeployFactory {
    return new Contract(address, _abi, runner) as unknown as IDeployFactory;
  }
}
